{"version":3,"sources":["logo.svg","constants/template.const.js","reducers/template.reducer.js","constants/deployment.const.js","reducers/deployment.reducer.js","store.js","config.js","actions/deployment.action.js","components/DeploymentForm.js","actions/template.action.js","components/DeploymentTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TEMPLATE_CONST","initialState","loading","templates","error","versions","reducer","state","action","type","payload","find","template","name","DEPLOYMENT_CONST","deployments","newDeployment","deleteDeployment","rootReducer","combineReducers","templateReducer","deployment","deploymentReducer","URI","getAllDeployment","dispatch","axios","get","then","response","status","data","catch","err","DeploymentForm","useSelector","useDispatch","useState","templateArray","setTemplateArray","templateName","setTemplateName","version","setVersion","url","setUrl","useEffect","length","style","padding","Form","onSubmit","event","preventDefault","console","log","post","addDeployment","Group","as","Row","Label","column","sm","Col","Control","placeholder","onChange","e","target","value","getVersionsOfTemplate","undefined","key","map","i","defaultValue","vers","Button","variant","disabled","display","flexDirection","alignItems","Toast","show","autohide","delay","backgroundColor","onClose","Body","DeploymentTable","delDeployment","deploymentArray","setDeploymentArray","margin","Table","responsive","color","onClick","id","_id","delete","App","className","Boolean","window","location","hostname","match","store","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","logger","composeEnhancers","createStore","createStoreWithMiddleware","reducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2a1eeaae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const TEMPLATE_CONST = {\n    GET_TEMPLATE_LOADING: 'GET_TEMPLATE_LOADING',\n    GET_TEMPLATE_SUCCESS: 'GET_TEMPLATE_SUCCESS',\n    GET_TEMPLATE_FAILURE: 'GET_TEMPLATE_FAILURE'\n}","import { TEMPLATE_CONST } from '../constants/template.const'\n\nconst initialState = {\n    loading: false,\n    templates: [],\n    error: null,\n    versions: [] \n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case TEMPLATE_CONST.GET_TEMPLATE_LOADING:\n            return {\n                ...state,\n                loading:true\n            }\n        case TEMPLATE_CONST.GET_TEMPLATE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                templates: action.payload\n            }\n\n        case TEMPLATE_CONST.GET_TEMPLATE_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                templates: [],\n                error: action.payload\n            }\n\n        case 'update_version':\n            return {\n                ...state,\n                versions: state.templates.find(\n                    template => template.name === action.payload\n                ).versions\n            }\n        default:\n            return state\n    }\n}\n\nexport default reducer","export const DEPLOYMENT_CONST = {\n    GET_DEPLOYMENT_LOADING: 'GET_DEPLOYMENT_LOADING',\n    GET_DEPLOYMENT_SUCCESS: 'GET_DEPLOYMENT_SUCCESS',\n    GET_DEPLOYMENT_FAILURE: 'GET_DEPLOYMENT_FAILURE',\n\n    ADD_DEPLOYMENT_LOADING: 'ADD_DEPLOYMENT_LOADING',\n    ADD_DEPLOYMENT_SUCCESS: 'ADD_DEPLOYMENT_SUCCESS',\n    ADD_DEPLOYMENT_FAILURE: 'ADD_DEPLOYMENT_FAILURE',\n\n    DELETE_DEPLOYMENT_LOADING: 'DELETE_DEPLOYMENT_LOADING',\n    DELETE_DEPLOYMENT_SUCCESS: 'DELETE_DEPLOYMENT_SUCCESS',\n    DELETE_DEPLOYMENT_FAILURE: 'DELETE_DEPLOYMENT_FAILURE',\n}","import { DEPLOYMENT_CONST } from '../constants/deployment.const'\n\nconst initialState = {\n    loading: false,\n    deployments: [],\n    error: null,\n    newDeployment: false,\n    deleteDeployment: false\n}\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case DEPLOYMENT_CONST.GET_DEPLOYMENT_LOADING:\n            return {\n                ...state,\n                loading:true\n            }\n        case DEPLOYMENT_CONST.GET_DEPLOYMENT_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                deployments: action.payload\n            }\n\n        case DEPLOYMENT_CONST.GET_DEPLOYMENT_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                deployments: [],\n                error: action.payload\n            }\n\n        case DEPLOYMENT_CONST.ADD_DEPLOYMENT_LOADING: \n            return {\n                ...state,\n                loading: true\n            }\n\n        case DEPLOYMENT_CONST.ADD_DEPLOYMENT_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                newDeployment: true\n            }\n\n        case DEPLOYMENT_CONST.ADD_DEPLOYMENT_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                newDeployment: false,\n                error: action.payload\n            }\n\n        case DEPLOYMENT_CONST.DELETE_DEPLOYMENT_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n\n        case DEPLOYMENT_CONST.DELETE_DEPLOYMENT_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                deleteDeployment: true\n            }\n\n        case DEPLOYMENT_CONST.DELETE_DEPLOYMENT_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                deleteDeployment: false,\n                error: action.payload\n            }\n\n        case 'reset_new_deployment':\n            return {\n                ...state,\n                newDeployment: false\n            }\n\n        case 'reset_delete_deployment': \n            return {\n                ...state,\n                deleteDeployment: false\n            }\n    \n\n        default:\n            return state\n    }\n}\n\nexport default reducer","import { combineReducers } from 'redux';\nimport templateReducer from './reducers/template.reducer'\nimport deploymentReducer from './reducers/deployment.reducer'\n\nconst rootReducer = combineReducers({\n    template: templateReducer,\n    deployment: deploymentReducer\n})\n\nexport default rootReducer","export const URI = {\n    GET_DEPLOYEMNT: 'api/deployment',\n    GET_TEMPLATE: 'api/template'\n}\n","import axios from 'axios'\nimport { DEPLOYMENT_CONST } from '../constants/deployment.const'\nimport { URI } from '../config'\n\nexport const getAllDeployment = () => {\n    return(dispatch) => {\n        dispatch({\n            type: DEPLOYMENT_CONST.GET_DEPLOYMENT_LOADING\n        })\n        axios.get(URI.GET_DEPLOYEMNT)\n        .then(response => {\n            if(response.status === 200 ) {\n                dispatch({\n                    type: DEPLOYMENT_CONST.GET_DEPLOYMENT_SUCCESS,\n                    payload: response.data\n                })\n            } else {\n                dispatch({\n                    type: DEPLOYMENT_CONST.GET_DEPLOYMENT_FAILURE,\n                    payload: response\n                })\n            }\n            \n        })\n        .catch(err => {\n            dispatch({\n                type: DEPLOYMENT_CONST.GET_DEPLOYMENT_FAILURE,\n                payload: err\n            })\n        })\n    }\n}\n\nexport const addDeployment = (payload) => {\n    return(dispatch) => {\n        dispatch({\n            type: DEPLOYMENT_CONST.ADD_DEPLOYMENT_LOADING\n        })\n        axios.post(URI.GET_DEPLOYEMNT, payload)\n        .then(response => {\n            if(response.status === 200 ) {\n                dispatch({\n                    type: DEPLOYMENT_CONST.ADD_DEPLOYMENT_SUCCESS,\n                    payload: response.data\n                })\n                dispatch(getAllDeployment())\n            } else {\n                dispatch({\n                    type: DEPLOYMENT_CONST.ADD_DEPLOYMENT_FAILURE,\n                    payload: response\n                })\n            }\n            \n        })\n        .catch(err => {\n            dispatch({\n                type: DEPLOYMENT_CONST.ADD_DEPLOYMENT_FAILURE,\n                payload: err\n            })\n        })\n    }\n}\n\nexport const deleteDeployment = (id) => {\n    return(dispatch) => {\n        dispatch({\n            type: DEPLOYMENT_CONST.DELETE_DEPLOYMENT_LOADING\n        })\n        axios.delete(URI.GET_DEPLOYEMNT + '/' + id)\n        .then(response => {\n            if(response.status === 200 ) {\n                dispatch({\n                    type: DEPLOYMENT_CONST.DELETE_DEPLOYMENT_SUCCESS,\n                    payload: response.data\n                })\n                dispatch(getAllDeployment())\n            } else {\n                dispatch({\n                    type: DEPLOYMENT_CONST.DELETE_DEPLOYMENT_FAILURE,\n                    payload: response\n                })\n            }\n            \n        })\n        .catch(err => {\n            dispatch({\n                type: DEPLOYMENT_CONST.DELETE_DEPLOYMENT_FAILURE,\n                payload: err\n            })\n        })\n    }\n}\n\nexport const resetNewDeployment = () => {\n    return(dispatch) => {\n        dispatch({\n            type: 'reset_new_deployment',\n        })\n    }\n}\n\nexport const resetDeleteDeployment = () => {\n    return(dispatch) => {\n        dispatch({\n            type: 'reset_delete_deployment',\n        })\n    }\n}","import React, { useState, useEffect } from 'react'\nimport {\n    Form,\n    Button,\n    Row,\n    Col,\n    Toast\n} from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { getAllTemplates, getVersionsOfTemplate } from '../actions/template.action'\nimport { addDeployment, resetNewDeployment } from '../actions/deployment.action'\n\nconst DeploymentForm = () => {\n    const templates = useSelector(state => state.template.templates)\n    const versions = useSelector(state => state.template.versions)\n\n    const newDeployment = useSelector(state => state.deployment.newDeployment)\n\n    const dispatch = useDispatch()\n\n    const [templateArray, setTemplateArray] = useState([])\n    const [templateName, setTemplateName] = useState('')\n    const [version, setVersion] = useState('')\n    const [url, setUrl] = useState('')\n\n    const toggleShowToast = () => dispatch(resetNewDeployment())\n\n    useEffect(() => {\n        if(templates.length) {\n            setTemplateArray(templates)\n        } else {\n            dispatch(getAllTemplates())\n        }\n      }, [templates, dispatch]);\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        console.log(event)\n        let payload = {\n            url,\n            templateName,\n            version\n        }\n        dispatch(addDeployment(payload))\n    }\n\n    return (\n        <div style={{padding: '25px'}}>\n            <h3> Add new Deployment</h3>\n        <Form onSubmit={handleSubmit}>\n            <Form.Group as={Row}>\n                <Form.Label column sm=\"6\">Template</Form.Label>\n                <Col>\n                    <Form.Control \n                        as=\"select\" \n                        sm=\"6\" \n                        placeholder=\"Select Template\" \n                        onChange={(e) => {\n                            setTemplateName(e.target.value)\n                            dispatch(getVersionsOfTemplate(e.target.value))\n                        }}\n                        value={templateName}\n                    >\n                        <option value={undefined} key={-1}> Select Template</option>\n                        {templateArray && templateArray.map((template, i) => {\n                            return(\n                            <option value={template.name} key={i}>{template.name}</option>\n                            )\n                        })}\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n                <Form.Label column sm=\"6\">Version</Form.Label>\n                <Col>\n                    <Form.Control \n                        as=\"select\" \n                        sm=\"6\" \n                        placeholder=\"Select Version\" \n                        onChange={(e) => setVersion(e.target.value)}\n                        defaultValue={version}\n                    >\n                        <option value={undefined} key={-1}> Select Version </option>\n                        {versions && versions.map((vers, i) => {\n                            return(\n                            <option value={vers} key={i}>{vers}</option>\n                            )\n                        })}\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n                <Form.Label column sm=\"6\">Url</Form.Label>\n                <Col>\n                    <Form.Control \n                        placeholder=\"Enter Url\"\n                        value={url}\n                        onChange={(e) => setUrl(e.target.value)}\n                    />\n                </Col>\n                \n            </Form.Group>\n            {\n                templateName && version && url ? \n                (\n                    <Button variant=\"primary\" type=\"submit\">\n                        Submit\n                    </Button>\n                )\n                : \n                (\n                    <Button variant=\"secondary\" type=\"submit\" disabled>\n                        Submit\n                    </Button>\n                )\n            }\n            <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n                <Toast \n                    show={newDeployment} \n                    autohide={true} \n                    delay={3000} \n                    style={{backgroundColor: 'green'}}\n                    onClose={toggleShowToast}\n                >\n                        <Toast.Body> Deployment Added Successfully !</Toast.Body>\n                </Toast>\n            </div>\n            \n        </Form>\n        </div>\n        \n    )\n}\n\nexport default DeploymentForm","import axios from 'axios'\nimport { TEMPLATE_CONST } from '../constants/template.const'\nimport { URI } from '../config'\n\nexport const getAllTemplates = () => {\n    return(dispatch) => {\n        dispatch({\n            type: TEMPLATE_CONST.GET_TEMPLATE_LOADING\n        })\n        axios.get(URI.GET_TEMPLATE)\n        .then(response => {\n            if(response.status === 200) {\n                dispatch({\n                    type: TEMPLATE_CONST.GET_TEMPLATE_SUCCESS,\n                    payload: response.data\n                })\n            } else {\n                dispatch({\n                    type: TEMPLATE_CONST.GET_TEMPLATE_FAILURE,\n                    payload: response\n                })\n            }\n                \n        })\n        .catch(err => {\n            dispatch({\n                type: TEMPLATE_CONST.GET_TEMPLATE_FAILURE,\n                payload: err\n            })\n        })\n    }\n}\n\nexport const getVersionsOfTemplate = (templateName) => {\n    return (dispatch) => {\n        dispatch({\n            type: 'update_version',\n            payload: templateName\n        })\n    }\n}","import React, { useEffect, useState } from 'react'\nimport { Table, Button, Toast } from 'react-bootstrap'\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { getAllDeployment, deleteDeployment, resetDeleteDeployment } from '../actions/deployment.action'\n\nconst DeploymentTable = () => {\n    const dispatch = useDispatch()\n\n    const deployments = useSelector(state => state.deployment.deployments)\n    const delDeployment = useSelector(state => state.deployment.deleteDeployment)\n\n    const [deploymentArray, setDeploymentArray] = useState([])\n\n    const toggleShowToast = () => dispatch(resetDeleteDeployment())\n\n\n    useEffect(() => {\n        if(deployments.length) {\n            setDeploymentArray(deployments)\n        } else {\n            dispatch(getAllDeployment())\n        }\n        \n    }, [deployments, dispatch])\n\n    return (\n        <div style={{margin: '25px'}}>\n            <h3> Deployments List </h3>\n        <Table responsive style={{color: 'white'}}>\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Url</th>\n                    <th>Template Name</th>\n                    <th>Version</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                {deploymentArray && deploymentArray.map((deployment, i) => {\n                    return (\n                        <tr key={i}>\n                            <td>{i +1}</td>\n                            <td> {deployment.url}</td>\n                            <td> {deployment.templateName}</td>\n                            <td>{deployment.version}</td>\n                            <td>\n                                <Button onClick={() => dispatch(deleteDeployment(deployment._id))} variant=\"danger\">Delete</Button>\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </Table>\n        <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n            <Toast \n                show={delDeployment} \n                autohide={true} \n                delay={3000} \n                style={{backgroundColor: 'red'}}\n                onClose={toggleShowToast}\n            >\n                <Toast.Body> Deployment Deleted Successfully !</Toast.Body>\n            </Toast>\n        </div>\n        \n        </div>\n    )\n}\n\nexport default DeploymentTable","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport DeploymentForm from './components/DeploymentForm'\nimport DeploymentTable from './components/DeploymentTable'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DeploymentForm/>\n        <DeploymentTable/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport reducers from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst createStoreWithMiddleware = composeEnhancers(applyMiddleware(thunk, logger))(createStore);\nconst store = createStoreWithMiddleware(reducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}